package com.belnitskii.birthdayreminderbot;

import com.belnitskii.birthdayreminderbot.config.BotConfig;
import com.belnitskii.birthdayreminderbot.model.Person;
import com.belnitskii.birthdayreminderbot.model.User;
import com.belnitskii.birthdayreminderbot.service.PersonService;
import com.belnitskii.birthdayreminderbot.service.TelegramAuthTokenService;
import com.belnitskii.birthdayreminderbot.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;
import java.util.Optional;

@Component
public class TelegramBot extends TelegramLongPollingBot {
    private static final Logger logger = LoggerFactory.getLogger(TelegramBot.class);
    private final BotConfig botConfig;
    private final PersonService personService;
    private final UserService userService;
    private final TelegramAuthTokenService authTokenService;

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    public TelegramBot(BotConfig botConfig, PersonService personService, UserService userService, TelegramAuthTokenService authTokenService) {
        super(botConfig.getToken());
        this.botConfig = botConfig;
        this.personService = personService;
        this.userService = userService;
        this.authTokenService = authTokenService;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (ID: {}): {}", update.getMessage().getFrom().getFirstName(), update.getMessage().getChatId(), update.getMessage().getText());
            if (text.startsWith("/link")) {
                String[] parts = text.split(" ");
                if (parts.length == 2) {
                    String token = parts[1];
                    Optional<User> userOpt = authTokenService.connectTelegram(token, update.getMessage().getFrom().getId());
                    if (userOpt.isPresent()) {
                        sendMessage(chatId, "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!");
                    } else {
                        sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    }
                } else {
                    sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /link <your_token>");
                }
            }
            switch (text) {
                case "/start":
                    sendMessage(chatId,"–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à Telegram-–±–æ—Ç. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?");
                    break;
                case "/list":
                    getList(update);
                    break;
                case "/help":
                    sendMessage(chatId,"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥");
                    break;
                case "/get":
                    sendMessage(chatId, personService.getPerson(1L).toString());;
                    break;
                default:
                    sendMessage(chatId,"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help.");
            }
        }
    }

    private void getList(Update update) {
        long chatId = update.getMessage().getChatId();
        Long telegramUserId = update.getMessage().getFrom().getId();
        User user = userService.getCurrentUserByTelegramId(telegramUserId);

        if (user != null) {
            List<Person> people = personService.getPersonsByTelegramId(telegramUserId);
            if (people.isEmpty()) {
                sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.");
            } else {
                StringBuilder sb = new StringBuilder("–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n");
                for (Person person : people) {
                    sb.append("üë§ ").append(person.getName())
                            .append(" ‚Äî ").append(person.getBirthdayDate()).append("\n");
                }
                sendMessage(chatId, sb.toString());
            }
        } else {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç: /link <username>");
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }
}